// ****************************************************************************** 
// Copyright     :  Copyright (C) 2018, Hisilicon Technologies Co. Ltd.
// File name     :  sysctrl_cfg_reg_offset.h
// Project line  :  ICT
// Department    :  ICT Processor Chipset Development Dep
// Author        :  xxx
// Version       :  1.0
// Date          :  2018/6/25
// Description   :  The description of AI project
// Others        :  Generated automatically by nManager V4.2 
// History       :  xxx 2018/08/16 12:16:13 Create file
// ******************************************************************************

#ifndef __SYSCTRL_CFG_REG_OFFSET_H__
#define __SYSCTRL_CFG_REG_OFFSET_H__

/* SYSCTRL_CFG Base address of Module's Register */
#define SOC_SYSCTRL_CFG_BASE                       (0x0)

/******************************************************************************/
/*                      SOC SYSCTRL_CFG Registers' Definitions                            */
/******************************************************************************/

#define SOC_SYSCTRL_CFG_SC_PLL1_FCTRL_REG                  (SOC_SYSCTRL_CFG_BASE + 0x10)   /* SC_PLL1_FCTRL为CDIE_CRG的PLL1整数分频 */
#define SOC_SYSCTRL_CFG_SC_PLL1_FCTRL_FRAC_REG             (SOC_SYSCTRL_CFG_BASE + 0x14)   /* SC_PLL1_FCTRL_FRAC为CDIE_CRG的PLL1小数分频 */
#define SOC_SYSCTRL_CFG_SC_PLL6_FCTRL_REG                  (SOC_SYSCTRL_CFG_BASE + 0x20)   /* SC_PLL6_FCTRL为CDIE_CRG的PLL6整数分频 */
#define SOC_SYSCTRL_CFG_SC_PLL6_FCTRL_FRAC_REG             (SOC_SYSCTRL_CFG_BASE + 0x24)   /* SC_PLL6_FCTRL_FRAC为CDIE_CRG的PLL6小数分频 */
#define SOC_SYSCTRL_CFG_SC_PLL_CLK_BYPASS0_REG             (SOC_SYSCTRL_CFG_BASE + 0xA0)   /* SC_PLL_CLK_BYPASS0为CDIE_CRG的PLL相关工作时钟选择。 */
#define SOC_SYSCTRL_CFG_SC_PLL_CLK_BYPASS1_REG             (SOC_SYSCTRL_CFG_BASE + 0xA4)   /* SC_PLL_CLK_BYPASS1为CDIE_CRG的PLL相关工作时钟选择。 */
#define SOC_SYSCTRL_CFG_SC_PLLCTRL_REG                     (SOC_SYSCTRL_CFG_BASE + 0xB0)   /* SC_PLLCTRL为PLL控制寄存器。 */
#define SOC_SYSCTRL_CFG_SC_SYSMODE_CTRL_REG                (SOC_SYSCTRL_CFG_BASE + 0xB4)   /* SC_SYSMODE_CTRL为CDIE_CRG系统时钟工作模式控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_HPM_CLK_SEL_REG                 (SOC_SYSCTRL_CFG_BASE + 0x104)  /* HPM时钟频率选择寄存器。 */
#define SOC_SYSCTRL_CFG_SC_MBIST_CPUI_CLK_SEL_REG          (SOC_SYSCTRL_CFG_BASE + 0x108)  /* CPU启动MBIST时钟选择信号 */
#define SOC_SYSCTRL_CFG_SC_TSENSORE_CLK_SEL_REG            (SOC_SYSCTRL_CFG_BASE + 0x110)  /* TSENSOR时钟频率选择寄存器。 */
#define SOC_SYSCTRL_CFG_SC_ALL_SCAN_CTRL_REG               (SOC_SYSCTRL_CFG_BASE + 0x150)  /* SC_ALL_SCAN_CTRL为ALL_SCAN模式OCC时钟关断控制寄存器。 */
#define SOC_SYSCTRL_CFG_SC_BYPASS_ICG_EN_PLL_REG           (SOC_SYSCTRL_CFG_BASE + 0x160)  /* PLL控制寄存器。 */
#define SOC_SYSCTRL_CFG_SC_SYSSOFTRST_CTRL_REG             (SOC_SYSCTRL_CFG_BASE + 0x200)  /* SC_SYSSOFTRST_CTRL为CRG系统软复位寄存器（无线产品应用中，请勿配置）。 */
#define SOC_SYSCTRL_CFG_SC_WDOG_RESET_CFG_REG              (SOC_SYSCTRL_CFG_BASE + 0x210)  /* 看门狗溢出复位范围控制寄存器（无线产品应用中，请勿配置）。 */
#define SOC_SYSCTRL_CFG_SC_PORN_ENABLE_REG                 (SOC_SYSCTRL_CFG_BASE + 0x220)  /* 按键复位区分上电非上电选择 */
#define SOC_SYSCTRL_CFG_SC_MBIGEN_CLK_EN_REG               (SOC_SYSCTRL_CFG_BASE + 0x300)  /* SC_MBIGEN_CLK_EN为MBIGEN的时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_MBIGEN_CLK_DIS_REG              (SOC_SYSCTRL_CFG_BASE + 0x304)  /* SC_MBIGEN_CLK_DIS为MBIGEN的时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_FTE_CLK_EN_REG                  (SOC_SYSCTRL_CFG_BASE + 0x308)  /* FTE时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_FTE_CLK_DIS_REG                 (SOC_SYSCTRL_CFG_BASE + 0x30C)  /* FTE时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_GPIO_CLK_EN_REG                 (SOC_SYSCTRL_CFG_BASE + 0x320)  /* GPIO时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_GPIO_CLK_DIS_REG                (SOC_SYSCTRL_CFG_BASE + 0x324)  /* GPIO时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_DDR_CLK_EN_REG                  (SOC_SYSCTRL_CFG_BASE + 0x338)  /* SC_DDR_CLK_EN为DDR的时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_DDR_CLK_DIS_REG                 (SOC_SYSCTRL_CFG_BASE + 0x33C)  /* SC_DDR_CLK_DIS为L3D的时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_DDR_EXMBITST_CLK_EN_REG         (SOC_SYSCTRL_CFG_BASE + 0x340)  /* SC_DDR_EXMBITST_CLK_EN为DDR_EXMBITST的时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_DDR_EXMBITST_CLK_DIS_REG        (SOC_SYSCTRL_CFG_BASE + 0x344)  /* SC_DDR_EXMBITST_CLK_DIS为DDR_EXMBITST的时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_HHA_CLK_EN_REG                  (SOC_SYSCTRL_CFG_BASE + 0x350)  /* SC_HHA_CLK_EN表示HHA逻辑时钟使能配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_HHA_CLK_DIS_REG                 (SOC_SYSCTRL_CFG_BASE + 0x354)  /* SC_HHA_CLK_DIS表示HHA逻辑时钟禁止使能配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_SMMU_ICG_EN_REG                 (SOC_SYSCTRL_CFG_BASE + 0x380)  /* SMMU时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_SMMU_ICG_DIS_REG                (SOC_SYSCTRL_CFG_BASE + 0x384)  /* SMMU时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_SDMAM_ICG_EN_REG                (SOC_SYSCTRL_CFG_BASE + 0x388)  /* SDMAM时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_SDMAM_ICG_DIS_REG               (SOC_SYSCTRL_CFG_BASE + 0x38C)  /* SDMAM时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_PROBE_CLK_EN_REG                (SOC_SYSCTRL_CFG_BASE + 0x480)  /* PROBE时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_PROBE_CLK_DIS_REG               (SOC_SYSCTRL_CFG_BASE + 0x484)  /* PROBE时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_WATCHDOG_CLK_EN_REG             (SOC_SYSCTRL_CFG_BASE + 0x520)  /* WATCHDOG时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_WATCHDOG_CLK_DIS_REG            (SOC_SYSCTRL_CFG_BASE + 0x524)  /* WATCHDOG时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_WATCHDOG_SEC_CLK_EN_REG         (SOC_SYSCTRL_CFG_BASE + 0x528)  /* WATCHDOG_SEC时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_WATCHDOG_SEC_CLK_DIS_REG        (SOC_SYSCTRL_CFG_BASE + 0x52C)  /* WATCHDOG_SEC时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_SFC_BUS_CLK_EN_REG              (SOC_SYSCTRL_CFG_BASE + 0x550)  /* SFC_BUS时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_SFC_BUS_CLK_DIS_REG             (SOC_SYSCTRL_CFG_BASE + 0x554)  /* SFC_BUS时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_CLK_EN0_REG               (SOC_SYSCTRL_CFG_BASE + 0x580)  /* TIMER时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_CLK_DIS0_REG              (SOC_SYSCTRL_CFG_BASE + 0x584)  /* TIMER时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_CLK_EN1_REG               (SOC_SYSCTRL_CFG_BASE + 0x588)  /* TIMER时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_CLK_DIS1_REG              (SOC_SYSCTRL_CFG_BASE + 0x58C)  /* TIMER时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_SEC_TIMER64_CLK_EN_REG          (SOC_SYSCTRL_CFG_BASE + 0x590)  /* SEC_TIMER64时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_SEC_TIMER64_CLK_DIS_REG         (SOC_SYSCTRL_CFG_BASE + 0x594)  /* SEC_TIMER64时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_REF_CLK_EN_REG                  (SOC_SYSCTRL_CFG_BASE + 0x600)  /* SC_REF_CLK_EN是clk_ref的时钟使能寄存器。 */
#define SOC_SYSCTRL_CFG_SC_REF_CLK_DIS_REG                 (SOC_SYSCTRL_CFG_BASE + 0x604)  /* SC_REF_CLK_DIS是clk_ref时钟禁止寄存器。 */
#define SOC_SYSCTRL_CFG_SC_GPIO_CLK_DB_EN_REG              (SOC_SYSCTRL_CFG_BASE + 0x608)  /* SC_GPIO_DB_CLK_EN是clk_gpio_db的时钟使能寄存器。 */
#define SOC_SYSCTRL_CFG_SC_GPIO_CLK_DB_DIS_REG             (SOC_SYSCTRL_CFG_BASE + 0x60C)  /* SC_GPIO_DB_CLK_DIS是clk_gpio_db时钟禁止寄存器。 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_CLK_EN_REG                (SOC_SYSCTRL_CFG_BASE + 0x618)  /* SC_DJTAG_CLKEN表示DJTAG逻辑时钟使能配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_CLK_DIS_REG               (SOC_SYSCTRL_CFG_BASE + 0x61C)  /* SC_DJTAG_CLK_DIS表示DJTAG逻辑时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_FUNC_MBIST_CLK_EN_REG           (SOC_SYSCTRL_CFG_BASE + 0x620)  /* FUNC_MBIST时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_FUNC_MBIST_CLK_DIS_REG          (SOC_SYSCTRL_CFG_BASE + 0x624)  /* FUNC_MBIST时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_HPM_CLK_EN_REG                  (SOC_SYSCTRL_CFG_BASE + 0x628)  /* SC_HPM_CLK_EN是HPM的时钟使能寄存器。 */
#define SOC_SYSCTRL_CFG_SC_HPM_CLK_DIS_REG                 (SOC_SYSCTRL_CFG_BASE + 0x62C)  /* SC_HPM_CLK_DIS是HPM时钟禁止寄存器。 */
#define SOC_SYSCTRL_CFG_SC_SYSCNT_CLK_EN_REG               (SOC_SYSCTRL_CFG_BASE + 0x630)  /* SC_SYSCNT_CLK_EN是clk_syscnt的时钟使能寄存器。 */
#define SOC_SYSCTRL_CFG_SC_SYSCNT_CLK_DIS_REG              (SOC_SYSCTRL_CFG_BASE + 0x634)  /* SC_SYSCNT_CLK_DIS是clk_syscnt时钟禁止寄存器。 */
#define SOC_SYSCTRL_CFG_SC_ULTRASOC_CLK_EN_REG             (SOC_SYSCTRL_CFG_BASE + 0x640)  /* SC_ULTRASOC_CLK_EN是ULTRASOC的时钟使能寄存器。 */
#define SOC_SYSCTRL_CFG_SC_ULTRASOC_CLK_DIS_REG            (SOC_SYSCTRL_CFG_BASE + 0x644)  /* SC_ULTRASOC_CLK_DIS是ULTRASOC时钟禁止寄存器。 */
#define SOC_SYSCTRL_CFG_SC_DCIP_CLK_EN_REG                 (SOC_SYSCTRL_CFG_BASE + 0x650)  /* SC_DCIP_CLK_EN的时钟使能寄存器。 */
#define SOC_SYSCTRL_CFG_SC_DCIP_CLK_DIS_REG                (SOC_SYSCTRL_CFG_BASE + 0x654)  /* SC_DCIP_CLK_DIS是DCIP时钟禁止寄存器。 */
#define SOC_SYSCTRL_CFG_SC_HHA_MBIST_CLK_EN_REG            (SOC_SYSCTRL_CFG_BASE + 0x680)  /* HHA mbsit时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_HHA_MBIST_CLK_DIS_REG           (SOC_SYSCTRL_CFG_BASE + 0x684)  /* HHA mbsit时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_MESH_CLK_EN_REG                 (SOC_SYSCTRL_CFG_BASE + 0x700)  /* MESH时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_MESH_CLK_DIS_REG                (SOC_SYSCTRL_CFG_BASE + 0x704)  /* MESH时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_FMETA_TEST_CLK_EN_REG           (SOC_SYSCTRL_CFG_BASE + 0x750)  /* FMETA TEST时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_FMETA_TEST_CLK_DIS_REG          (SOC_SYSCTRL_CFG_BASE + 0x754)  /* FMETA TEST时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_L3D_CLK_EN_REG                  (SOC_SYSCTRL_CFG_BASE + 0x7A0)  /* L3D的时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_L3D_CLK_DIS_REG                 (SOC_SYSCTRL_CFG_BASE + 0x7A4)  /* L3D的时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_L3D_MBIST_CLK_EN_REG            (SOC_SYSCTRL_CFG_BASE + 0x7A8)  /* L3D_MBIST的时钟使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_L3D_MBIST_CLK_DIS_REG           (SOC_SYSCTRL_CFG_BASE + 0x7AC)  /* L3D_MBIST的时钟禁止寄存器 */
#define SOC_SYSCTRL_CFG_SC_MBIGEN_RESET_REQ_REG            (SOC_SYSCTRL_CFG_BASE + 0xA00)  /* MBIGEN软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_MBIGEN_RESET_DREQ_REG           (SOC_SYSCTRL_CFG_BASE + 0xA04)  /* MBIGEN软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_SDMAM_RESET_REQ_REG             (SOC_SYSCTRL_CFG_BASE + 0xA08)  /* SDMAM软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_SDMAM_RESET_DREQ_REG            (SOC_SYSCTRL_CFG_BASE + 0xA0C)  /* SDMAM软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_FTE_RESET_REQ_REG               (SOC_SYSCTRL_CFG_BASE + 0xA10)  /* FTE软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_FTE_RESET_DREQ_REG              (SOC_SYSCTRL_CFG_BASE + 0xA14)  /* FTE软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_GPIO_RESET_REQ_REG              (SOC_SYSCTRL_CFG_BASE + 0xA20)  /* GPIO软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_GPIO_RESET_DREQ_REG             (SOC_SYSCTRL_CFG_BASE + 0xA24)  /* GPIO软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_DDRC_RESET_REQ_REG              (SOC_SYSCTRL_CFG_BASE + 0xA28)  /* SC_DDRC_RESET_REQ为CDIE内DDRC软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_DDRC_RESET_DREQ_REG             (SOC_SYSCTRL_CFG_BASE + 0xA2C)  /* SC_DDRC_RESET_DREQ为CDIE内DDRC软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_DDRC_EXMBIST_RESET_REQ_REG      (SOC_SYSCTRL_CFG_BASE + 0xA30)  /* SC_DDRC_exmbist_RESET_REQ为CDIE内DDRC_exmbist软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_DDRC_EXMBIST_RESET_DREQ_REG     (SOC_SYSCTRL_CFG_BASE + 0xA34)  /* SC_ddrc_exmbist_RESET_DREQ为CDIE内ddrc_exmbist软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_HHA_RESET_REQ_REG               (SOC_SYSCTRL_CFG_BASE + 0xA40)  /* SC_HHA_RESET_REQ为HHA软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_HHA_RESET_DREQ_REG              (SOC_SYSCTRL_CFG_BASE + 0xA44)  /* SC_HHA_RESET_DREQ为HHA软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_SFC_RESET_REQ_REG               (SOC_SYSCTRL_CFG_BASE + 0xA80)  /* SFC软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_SFC_RESET_DREQ_REG              (SOC_SYSCTRL_CFG_BASE + 0xA84)  /* SFC软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_RESET_REQ0_REG            (SOC_SYSCTRL_CFG_BASE + 0xA88)  /* TIMER软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_RESET_DREQ0_REG           (SOC_SYSCTRL_CFG_BASE + 0xA8C)  /* TIMER软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_RESET_REQ1_REG            (SOC_SYSCTRL_CFG_BASE + 0xA90)  /* TIMER软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_RESET_DREQ1_REG           (SOC_SYSCTRL_CFG_BASE + 0xA94)  /* TIMER软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_SEC_RESET_REQ_REG         (SOC_SYSCTRL_CFG_BASE + 0xA98)  /* TIMER_SEC软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_SEC_RESET_DREQ_REG        (SOC_SYSCTRL_CFG_BASE + 0xA9C)  /* TIMER_SEC软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_WDOG_RESET_REQ_REG              (SOC_SYSCTRL_CFG_BASE + 0xAA0)  /* WDOG软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_WDOG_RESET_DREQ_REG             (SOC_SYSCTRL_CFG_BASE + 0xAA4)  /* WDOG软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_WDOG_SEC_RESET_REQ_REG          (SOC_SYSCTRL_CFG_BASE + 0xAA8)  /* WDOG_SEC软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_WDOG_SEC_RESET_DREQ_REG         (SOC_SYSCTRL_CFG_BASE + 0xAAC)  /* WDOG_SEC软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_REQ_PHY_RESET_REQ_REG           (SOC_SYSCTRL_CFG_BASE + 0xB48)  /* DDR PHY软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_REQ_PHY_REGS_RESET_DREQ_REG     (SOC_SYSCTRL_CFG_BASE + 0xB4C)  /* DDR PHY的软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_ULTRASOC_RESET_REQ_REG          (SOC_SYSCTRL_CFG_BASE + 0xB50)  /* ULTRASOC软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_ULTRASOC__REGS_RESET_DREQ_REG   (SOC_SYSCTRL_CFG_BASE + 0xB54)  /* ULTRASOC的软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_STATUS_RESET_REQ_REG            (SOC_SYSCTRL_CFG_BASE + 0xC50)  /* STATUS软复位请求信号(CPU外所有ras软复位请求）。 */
#define SOC_SYSCTRL_CFG_SC_STATUS_RESET_DREQ_REG           (SOC_SYSCTRL_CFG_BASE + 0xC54)  /* STATUS软复位去请求信号。 */
#define SOC_SYSCTRL_CFG_SC_DCIP_RESET_REQ_REG              (SOC_SYSCTRL_CFG_BASE + 0xC60)  /* DCIPS软复位请求信号。 */
#define SOC_SYSCTRL_CFG_SC_DCIP_RESET_DREQ_REG             (SOC_SYSCTRL_CFG_BASE + 0xC64)  /* DCIP软复位去请求信号。 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_RESET_REQ_REG             (SOC_SYSCTRL_CFG_BASE + 0xD18)  /* SC_DJTAG_SRST_REQ表示DJTAG逻辑复位请求寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_RESET_DREQ_REG            (SOC_SYSCTRL_CFG_BASE + 0xD1C)  /* SC_DJTAG_SRST_DREQ表示DJTAG逻辑复位去请求寄存器 */
#define SOC_SYSCTRL_CFG_SC_FUNC_MBIST_RESET_REQ_REG        (SOC_SYSCTRL_CFG_BASE + 0xD20)  /* SC_FUNC_MBIST_RESET_REQ表示对当前FUNC_MBIST的RST_REQ信号的配置。 */
#define SOC_SYSCTRL_CFG_SC_FUNC_MBIST_RESET_DREQ_REG       (SOC_SYSCTRL_CFG_BASE + 0xD24)  /* SC_FUNC_MBIST_RESET_DEREQ表示对当前FUNC_MBIST的RST_REQ信号的去复位。 */
#define SOC_SYSCTRL_CFG_SC_HPM_RESET_REQ_REG               (SOC_SYSCTRL_CFG_BASE + 0xD28)  /* SC_HPM_SRST_REQ表示DJTAG逻辑复位请求寄存器 */
#define SOC_SYSCTRL_CFG_SC_HPM_RESET_DREQ_REG              (SOC_SYSCTRL_CFG_BASE + 0xD2C)  /* SC_HPM_SRST_DREQ表示HPM逻辑复位去请求寄存器 */
#define SOC_SYSCTRL_CFG_SC_SYSCNT_RESET_REQ_REG            (SOC_SYSCTRL_CFG_BASE + 0xD30)  /* SC_SYSCNT_SRST_REQ表示SYSCNT逻辑复位请求寄存器 */
#define SOC_SYSCTRL_CFG_SC_SYSCNT_RESET_DREQ_REG           (SOC_SYSCTRL_CFG_BASE + 0xD34)  /* SC_SYSCNT_SRST_DREQ表示SYSCNT逻辑复位去请求寄存器 */
#define SOC_SYSCTRL_CFG_SC_HHA_MBIST_RESET_REQ_REG         (SOC_SYSCTRL_CFG_BASE + 0xD80)  /* SC_HHA_MBIST_SRST_REQ表示逻辑复位请求寄存器 */
#define SOC_SYSCTRL_CFG_SC_HHA_MBIST_RESET_DREQ_REG        (SOC_SYSCTRL_CFG_BASE + 0xD84)  /* SC_HHA_MBISST_SRST_DREQ表示逻辑复位去请求寄存器 */
#define SOC_SYSCTRL_CFG_SC_FMETA_TEST_RESET_REQ_REG        (SOC_SYSCTRL_CFG_BASE + 0xDA0)  /* FMETA TEST逻辑复位请求寄存器 */
#define SOC_SYSCTRL_CFG_SC_FMETA_TEST_RESET_DREQ_REG       (SOC_SYSCTRL_CFG_BASE + 0xDA4)  /* FMETA TEST逻辑复位去请求寄存器 */
#define SOC_SYSCTRL_CFG_SC_L3D_RESET_REQ_REG               (SOC_SYSCTRL_CFG_BASE + 0xE00)  /* L3D软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_L3D_RESET_DREQ_REG              (SOC_SYSCTRL_CFG_BASE + 0xE04)  /* L3D软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_MBIST_L3D1_RESET_REQ_REG        (SOC_SYSCTRL_CFG_BASE + 0xE08)  /* MBIST_L3D1软复位请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_MBIST_L3D1_RESET_DREQ_REG       (SOC_SYSCTRL_CFG_BASE + 0xE0C)  /* MBIST_L3D1软复位去请求控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_DIE_ID_CFG_REG                  (SOC_SYSCTRL_CFG_BASE + 0x2000) /* ID配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_SOCKET_ID_CFG_REG               (SOC_SYSCTRL_CFG_BASE + 0x2004) /* ID配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_SYSCNT_CLK_SEL_REG              (SOC_SYSCTRL_CFG_BASE + 0x2008) /* SYSCNT时钟选择寄存器。 */
#define SOC_SYSCTRL_CFG_SC_DISPATCH_ERRRSP_REG             (SOC_SYSCTRL_CFG_BASE + 0x2064) /* dispatch的ERR响应类型控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_TSENSOR_DIG_ULTRAHIGH_REG       (SOC_SYSCTRL_CFG_BASE + 0x20C0) /* 片上数字温度传感器二级高温门限配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_TSENSOR_DIG_HIGH_REG            (SOC_SYSCTRL_CFG_BASE + 0x20C4) /* 片上数字温度传感器一级高温门限配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_TSENSOR_DIG_LOW_REG             (SOC_SYSCTRL_CFG_BASE + 0x20C8) /* 片上数字温度传感器低温门限配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_TSENSOR_SAMPLE_NUM_REG          (SOC_SYSCTRL_CFG_BASE + 0x20CC) /* 硬件连读采样Tsensor温度值后取平均的配置寄存器（禁止配置为0x0和0x1） */
#define SOC_SYSCTRL_CFG_SC_TENSOR_DIG_CFG_REG              (SOC_SYSCTRL_CFG_BASE + 0x20D0) /* 片上数字温度传感器工作参数配置 */
#define SOC_SYSCTRL_CFG_SC_DCIP_CORE_CTRL1_REG             (SOC_SYSCTRL_CFG_BASE + 0x20E0) /* HIDCIP CORE控制寄存器1 */
#define SOC_SYSCTRL_CFG_SC_DCIP_CORE_CTRL2_REG             (SOC_SYSCTRL_CFG_BASE + 0x20E4) /* HIDCIP CORE控制寄存器2 */
#define SOC_SYSCTRL_CFG_SC_DCIP_BIST0_CTRL_REG             (SOC_SYSCTRL_CFG_BASE + 0x20E8) /* HIDCIP BIST0控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_DCIP_BIST4_CTRL_REG             (SOC_SYSCTRL_CFG_BASE + 0x20EC) /* HIDCIP BIST4控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_RCD_DRV_REG                     (SOC_SYSCTRL_CFG_BASE + 0x20F0) /* 0.8V CML信号输出驱动电流能力控制信号 */
#define SOC_SYSCTRL_CFG_SC_RCD_SEL_REG                     (SOC_SYSCTRL_CFG_BASE + 0x20F4) /* 0.8V CML信号输出驱动电流能力控制信号 */
#define SOC_SYSCTRL_CFG_SC_DBGACK_CTRL_REG                 (SOC_SYSCTRL_CFG_BASE + 0x20FC) /* DBGACK 控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_ULTRASOC_USER_CFG_REG           (SOC_SYSCTRL_CFG_BASE + 0x2100) /* ULTRASOC AXI Master的USER域段配置 */
#define SOC_SYSCTRL_CFG_SC_ULTRASOC_PORT_SEL_REG           (SOC_SYSCTRL_CFG_BASE + 0x2104) /* ULTRASOC PORT选择配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_ULTRASOC_USER_NS_CFG_REG        (SOC_SYSCTRL_CFG_BASE + 0x2108) /* ULTRASOC AXI Master的USER域段中NS配置（安全寄存器） */
#define SOC_SYSCTRL_CFG_SC_DDRC_ENABLE_REG                 (SOC_SYSCTRL_CFG_BASE + 0x2200) /* DDRC使用情况指示寄存器 */
#define SOC_SYSCTRL_CFG_SC_EXT_INT_POLARITY_REG            (SOC_SYSCTRL_CFG_BASE + 0x2300) /* 外部中断极性配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_EXT_INT_MASK_REG                (SOC_SYSCTRL_CFG_BASE + 0x2304) /* 外部管脚屏蔽寄存器 */
#define SOC_SYSCTRL_CFG_SC_DS3_CTRL_UP_REG                 (SOC_SYSCTRL_CFG_BASE + 0x2400) /* PAD DS3控制寄存器0 */
#define SOC_SYSCTRL_CFG_SC_DS3_CTRL_DOWN_REG               (SOC_SYSCTRL_CFG_BASE + 0x2404) /* PAD DS3控制寄存器1 */
#define SOC_SYSCTRL_CFG_SC_MPAM_READ_MERGE_EN_REG          (SOC_SYSCTRL_CFG_BASE + 0x2450) /* MPAM MERGE EN控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_CMD_DELY_DEFINE_CFG_BUS0_REG    (SOC_SYSCTRL_CFG_BASE + 0x2500) /* CFG_BUS 命令之间访问延迟配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_CMD_DELY_DEFINE_CFG_BUS1_REG    (SOC_SYSCTRL_CFG_BASE + 0x2504) /* CFG_BUS 命令之间访问延迟配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_CMD_DELY_DEFINE_CFG_BUS2_REG    (SOC_SYSCTRL_CFG_BASE + 0x2508) /* CFG_BUS 命令之间访问延迟配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_CMD_DELY_DEFINE_CFG_BUS3_REG    (SOC_SYSCTRL_CFG_BASE + 0x250C) /* CFG_BUS 命令之间访问延迟配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_CFG_BUS0_WAIT_REG               (SOC_SYSCTRL_CFG_BASE + 0x2550) /* CFG_BUS 超时等待配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_CFG_BUS1_WAIT_REG               (SOC_SYSCTRL_CFG_BASE + 0x2554) /* CFG_BUS 超时等待配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_CFG_BUS2_WAIT_REG               (SOC_SYSCTRL_CFG_BASE + 0x2558) /* CFG_BUS 超时等待配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_CFG_BUS3_WAIT_REG               (SOC_SYSCTRL_CFG_BASE + 0x255C) /* CFG_BUS 超时等待配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_SFC_CLK_SEL_REG                 (SOC_SYSCTRL_CFG_BASE + 0x2568) /* SFC CLK选择控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_MEM_CTRL_SMMU_REG               (SOC_SYSCTRL_CFG_BASE + 0x3004) /* smmu mem控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_MEM_CTRL_ULTRASOC_REG           (SOC_SYSCTRL_CFG_BASE + 0x3040) /* ULTRASOC mem控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER32_EN_CTRL_REG             (SOC_SYSCTRL_CFG_BASE + 0x3100) /* TIMER32的外部使能控制寄存器（保留寄存器，配置无效果） */
#define SOC_SYSCTRL_CFG_SC_TIMER64_EN_CTRL_REG             (SOC_SYSCTRL_CFG_BASE + 0x3104) /* TIMER64的外部使能控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_SECURE_TIMER_EN_CTRL_REG        (SOC_SYSCTRL_CFG_BASE + 0x3108) /* SECURE_TIMER的外部使能控制寄存器（安全寄存器，只能安全CPU读写） */
#define SOC_SYSCTRL_CFG_SC_TIMER32_CLK_SEL0_L_REG          (SOC_SYSCTRL_CFG_BASE + 0x3110) /* TIMER32的时钟选择寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER32_CLK_SEL0_M_REG          (SOC_SYSCTRL_CFG_BASE + 0x3114) /* TIMER32的时钟选择寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER64_CLK_SEL0_REG            (SOC_SYSCTRL_CFG_BASE + 0x3118) /* TIMER64的时钟选择寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER32_CLK_SEL1_L_REG          (SOC_SYSCTRL_CFG_BASE + 0x311C) /* TIMER32的时钟选择寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER32_CLK_SEL1_M_REG          (SOC_SYSCTRL_CFG_BASE + 0x3120) /* TIMER32的时钟选择寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER64_CLK_SEL1_REG            (SOC_SYSCTRL_CFG_BASE + 0x3124) /* TIMER64的时钟选择寄存器 */
#define SOC_SYSCTRL_CFG_SC_SEC_TIMER_CLK_SEL_REG           (SOC_SYSCTRL_CFG_BASE + 0x3128) /* TIMER64的时钟选择寄存器（安全寄存器，只能安全CPU读写） */
#define SOC_SYSCTRL_CFG_SC_WDOG_RST_MASK_REG               (SOC_SYSCTRL_CFG_BASE + 0x3200) /* 安全狗复位请求MASK控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_RAS_IMU_CTRL_REG                (SOC_SYSCTRL_CFG_BASE + 0x3250) /* RAS中断上报IMU使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_BUS_NUM_PERI_REG                (SOC_SYSCTRL_CFG_BASE + 0x3400) /* SMMU BUSNUM配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_DVE_NUM_PERI_REG                (SOC_SYSCTRL_CFG_BASE + 0x3404) /* SMMU DVENUM配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_MBIST_CPUI_ENABLE_REG           (SOC_SYSCTRL_CFG_BASE + 0x3500) /* CPU启动MBIST选择信号；芯片电路测试使用。 */
#define SOC_SYSCTRL_CFG_SC_MBIST_CPUI_DATAIN_REG           (SOC_SYSCTRL_CFG_BASE + 0x3504) /* CPU启动MBIST，TMB电路数据和指令输入接口寄存器 */
#define SOC_SYSCTRL_CFG_SC_MBIST_CPUI_WRITE_EN_REG         (SOC_SYSCTRL_CFG_BASE + 0x3508) /* DFT MBIST模式下TMB电路CPU2TAP接口配置寄存器；芯片电路测试使用。 */
#define SOC_SYSCTRL_CFG_SC_MBIST_CPUI_SMS_FUNC_RESET_REG   (SOC_SYSCTRL_CFG_BASE + 0x350C) /* CPU启动MBIST复位信号 */
#define SOC_SYSCTRL_CFG_SC_MBIST_CPUI_FUNC_RESET_REG       (SOC_SYSCTRL_CFG_BASE + 0x3510) /* CPU启动MBIST请求信号 */
#define SOC_SYSCTRL_CFG_SC_SFC_BYP_CTRL_REG                (SOC_SYSCTRL_CFG_BASE + 0x3640) /* SFC AHB防挂死配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_SFC_DAW_CRL_REG                 (SOC_SYSCTRL_CFG_BASE + 0x3650) /* DAW SFC控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_CLOSE_PORT_REG                  (SOC_SYSCTRL_CFG_BASE + 0x3700) /* Cross Station Port关闭配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_MESH_REACTIVATE_EN_REG          (SOC_SYSCTRL_CFG_BASE + 0x3750) /* MESH时钟重新激活配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_MESH_REACTIVATE_CYCLES_REG      (SOC_SYSCTRL_CFG_BASE + 0x3754) /* MESH时钟重新激活CYCLES数寄存器 */
#define SOC_SYSCTRL_CFG_SC_TS_EN_REG                       (SOC_SYSCTRL_CFG_BASE + 0x3A30) /* TSVACLEB计数使能配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_PLL_SRC_INT_REG                 (SOC_SYSCTRL_CFG_BASE + 0x4000) /* PLL中断源寄存器 */
#define SOC_SYSCTRL_CFG_SC_PLL_INT_MASK_REG                (SOC_SYSCTRL_CFG_BASE + 0x4004) /* PLL中断屏蔽寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_SRC_INT_REG               (SOC_SYSCTRL_CFG_BASE + 0x4008) /* DJTAG中断源寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_INT_MASK_REG              (SOC_SYSCTRL_CFG_BASE + 0x400C) /* DJTAG中断屏蔽寄存器 */
#define SOC_SYSCTRL_CFG_SC_TSENSOR_INT_REG                 (SOC_SYSCTRL_CFG_BASE + 0x4010) /* TSENSOR中断源寄存器 */
#define SOC_SYSCTRL_CFG_SC_TSENSOR_INT_MASK_REG            (SOC_SYSCTRL_CFG_BASE + 0x4014) /* TSENSOR中断屏蔽寄存器 */
#define SOC_SYSCTRL_CFG_SC_PLL_INT_CLR_REG                 (SOC_SYSCTRL_CFG_BASE + 0x4050) /* PLL6中断清除配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_INT_MODE_REG                    (SOC_SYSCTRL_CFG_BASE + 0x40D0) /* 中断模式配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_XTAL_CTRL_REG                   (SOC_SYSCTRL_CFG_BASE + 0x4104) /* 晶振控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_ITCR_REG                        (SOC_SYSCTRL_CFG_BASE + 0x4108) /* 状态机测试使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_ITIR0_REG                       (SOC_SYSCTRL_CFG_BASE + 0x410C) /* 测试模式输入控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_ITOR_REG                        (SOC_SYSCTRL_CFG_BASE + 0x4110) /* 测试模式输出控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_CNT_DATA_CFG_REG                (SOC_SYSCTRL_CFG_BASE + 0x4114) /* PLL切换COUNTER的初始值配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_CNT_STEP_RSV_CFG_REG            (SOC_SYSCTRL_CFG_BASE + 0x4118) /* PLL切换COUNTER的递增配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_CNT_CTRL_REG                    (SOC_SYSCTRL_CFG_BASE + 0x411C) /* CNT配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_IM_CTRL_REG                     (SOC_SYSCTRL_CFG_BASE + 0x4120) /* Intterrupt模式控制寄存器 */
#define SOC_SYSCTRL_CFG_SC_IM_STAT_REG                     (SOC_SYSCTRL_CFG_BASE + 0x4124) /* Intterrupt模式状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_CHAIN_ERR_CLR_REG               (SOC_SYSCTRL_CFG_BASE + 0x4200) /* CFG_BUS中断清除寄存器 */
#define SOC_SYSCTRL_CFG_SC_CHAIN_ERR_INTMASK_REG           (SOC_SYSCTRL_CFG_BASE + 0x4204) /* CFG_BUS CHAIN ERR的中断屏蔽寄存器 */
#define SOC_SYSCTRL_CFG_SC_CHAIN_ERR_INT_STATUS_REG        (SOC_SYSCTRL_CFG_BASE + 0x4208) /* CFG_BUS CHAIN ERR的原始中断状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_NOCMT_IRQ_REG                   (SOC_SYSCTRL_CFG_BASE + 0x4300) /* 泰山无指令超时中断寄存器 */
#define SOC_SYSCTRL_CFG_SC_NOCMT_IRQ_INT_MASK_REG          (SOC_SYSCTRL_CFG_BASE + 0x4304) /* 泰山无指令超时中断屏蔽寄存器 */
#define SOC_SYSCTRL_CFG_SC_NOCMT_IRQ_RST_EN_REG            (SOC_SYSCTRL_CFG_BASE + 0x4308) /* 泰山无指令中断输出复位使能寄存器 */
#define SOC_SYSCTRL_CFG_SC_NOCMT_IRQ_SEL_REG               (SOC_SYSCTRL_CFG_BASE + 0x430C) /* 泰山无指令中断输出选择寄存器 */
#define SOC_SYSCTRL_CFG_SC_JITTER_MONITOR_CFG0_REG         (SOC_SYSCTRL_CFG_BASE + 0x4400) /* JITTER MONITOR配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_JITTER_MONITOR_CFG1_REG         (SOC_SYSCTRL_CFG_BASE + 0x4404) /* JITTER MONITOR配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_JITTER_MONITOR_CFG2_REG         (SOC_SYSCTRL_CFG_BASE + 0x4408) /* JITTER MONITOR配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_JITTER_MONITOR_CFG3_REG         (SOC_SYSCTRL_CFG_BASE + 0x440C) /* JITTER MONITOR配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_JITTER_MONITOR_CFG4_REG         (SOC_SYSCTRL_CFG_BASE + 0x4410) /* JITTER MONITOR配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_JITTER_MONITOR_CFG5_REG         (SOC_SYSCTRL_CFG_BASE + 0x4414) /* JITTER MONITOR配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_PROBE_SYSTEM_COUNTER_VALUE_REG  (SOC_SYSCTRL_CFG_BASE + 0x4580) /* System Counter的DFX寄存器，可产生System Counter脉冲，用于多片间计数值的比对。 */
#define SOC_SYSCTRL_CFG_SC_PROBE_SYSTEM_COUNTER_EN_REG     (SOC_SYSCTRL_CFG_BASE + 0x4584) /* System Counter的DFX寄存器，用于打开多片间计数值的比对功能。 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE0_ADDR0_REG        (SOC_SYSCTRL_CFG_BASE + 0x4600) /* SC_BROADCAST_DIE0_ADDR0表示CPU CORE EVENT广播到DIE0的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE0_ADDR1_REG        (SOC_SYSCTRL_CFG_BASE + 0x4604) /* SC_BROADCAST_DIE0_ADDR1表示CPU CORE EVENT广播到DIE0的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE1_ADDR0_REG        (SOC_SYSCTRL_CFG_BASE + 0x4610) /* SC_BROADCAST_DIE1_ADDR0表示CPU CORE EVENT广播到DIE1的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE1_ADDR1_REG        (SOC_SYSCTRL_CFG_BASE + 0x4614) /* SC_BROADCAST_DIE1_ADDR1表示CPU CORE EVENT广播到DIE1的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE2_ADDR0_REG        (SOC_SYSCTRL_CFG_BASE + 0x4620) /* SC_BROADCAST_DIE2_ADDR0表示CPU CORE EVENT广播到DIE2的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE2_ADDR1_REG        (SOC_SYSCTRL_CFG_BASE + 0x4624) /* SC_BROADCAST_DIE2_ADDR1表示CPU CORE EVENT广播到DIE2的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE3_ADDR0_REG        (SOC_SYSCTRL_CFG_BASE + 0x4630) /* SC_BROADCAST_DIE3_ADDR0表示CPU CORE EVENT广播到DIE3的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE3_ADDR1_REG        (SOC_SYSCTRL_CFG_BASE + 0x4634) /* SC_BROADCAST_DIE3_ADDR1表示CPU CORE EVENT广播到DIE3的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE4_ADDR0_REG        (SOC_SYSCTRL_CFG_BASE + 0x4640) /* SC_BROADCAST_DIE4_ADDR0表示CPU CORE EVENT广播到DIE4的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE4_ADDR1_REG        (SOC_SYSCTRL_CFG_BASE + 0x4644) /* SC_BROADCAST_DIE4_ADDR1表示CPU CORE EVENT广播到DIE4的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE5_ADDR0_REG        (SOC_SYSCTRL_CFG_BASE + 0x4650) /* SC_BROADCAST_DIE5_ADDR0表示CPU CORE EVENT广播到DIE5的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE5_ADDR1_REG        (SOC_SYSCTRL_CFG_BASE + 0x4654) /* SC_BROADCAST_DIE5_ADDR1表示CPU CORE EVENT广播到DIE5的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE6_ADDR0_REG        (SOC_SYSCTRL_CFG_BASE + 0x4660) /* SC_BROADCAST_DIE6_ADDR0表示CPU CORE EVENT广播到DIE6的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE6_ADDR1_REG        (SOC_SYSCTRL_CFG_BASE + 0x4664) /* SC_BROADCAST_DIE6_ADDR1表示CPU CORE EVENT广播到DIE6的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE7_ADDR0_REG        (SOC_SYSCTRL_CFG_BASE + 0x4670) /* SC_BROADCAST_DIE7_ADDR0表示CPU CORE EVENT广播到DIE7的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE7_ADDR1_REG        (SOC_SYSCTRL_CFG_BASE + 0x4674) /* SC_BROADCAST_DIE7_ADDR1表示CPU CORE EVENT广播到DIE7的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE8_ADDR0_REG        (SOC_SYSCTRL_CFG_BASE + 0x4680) /* SC_BROADCAST_DIE8_ADDR0表示CPU CORE EVENT广播到DIE8的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE8_ADDR1_REG        (SOC_SYSCTRL_CFG_BASE + 0x4684) /* SC_BROADCAST_DIE8_ADDR1表示CPU CORE EVENT广播到DIE8的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE9_ADDR0_REG        (SOC_SYSCTRL_CFG_BASE + 0x4690) /* SC_BROADCAST_DIE9_ADDR0表示CPU CORE EVENT广播到DIE9的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE9_ADDR1_REG        (SOC_SYSCTRL_CFG_BASE + 0x4694) /* SC_BROADCAST_DIE9_ADDR1表示CPU CORE EVENT广播到DIE9的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE10_ADDR0_REG       (SOC_SYSCTRL_CFG_BASE + 0x46A0) /* SC_BROADCAST_DIE10_ADDR0表示CPU CORE EVENT广播到DIE10的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE10_ADDR1_REG       (SOC_SYSCTRL_CFG_BASE + 0x46A4) /* SC_BROADCAST_DIE10_ADDR1表示CPU CORE EVENT广播到DIE10的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE11_ADDR0_REG       (SOC_SYSCTRL_CFG_BASE + 0x46B0) /* SC_BROADCAST_DIE11_ADDR0表示CPU CORE EVENT广播到DIE11的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE11_ADDR1_REG       (SOC_SYSCTRL_CFG_BASE + 0x46B4) /* SC_BROADCAST_DIE11_ADDR1表示CPU CORE EVENT广播到DIE11的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE12_ADDR0_REG       (SOC_SYSCTRL_CFG_BASE + 0x46C0) /* SC_BROADCAST_DIE12_ADDR0表示CPU CORE EVENT广播到DIE12的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE12_ADDR1_REG       (SOC_SYSCTRL_CFG_BASE + 0x46C4) /* SC_BROADCAST_DIE12_ADDR1表示CPU CORE EVENT广播到DIE12的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE13_ADDR0_REG       (SOC_SYSCTRL_CFG_BASE + 0x46D0) /* SC_BROADCAST_DIE13_ADDR0表示CPU CORE EVENT广播到DIE13的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE13_ADDR1_REG       (SOC_SYSCTRL_CFG_BASE + 0x46D4) /* SC_BROADCAST_DIE13_ADDR1表示CPU CORE EVENT广播到DIE13的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE14_ADDR0_REG       (SOC_SYSCTRL_CFG_BASE + 0x46E0) /* SC_BROADCAST_DIE14_ADDR0表示CPU CORE EVENT广播到DIE14的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE14_ADDR1_REG       (SOC_SYSCTRL_CFG_BASE + 0x46E4) /* SC_BROADCAST_DIE14_ADDR1表示CPU CORE EVENT广播到DIE14的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE15_ADDR0_REG       (SOC_SYSCTRL_CFG_BASE + 0x46F0) /* SC_BROADCAST_DIE15_ADDR0表示CPU CORE EVENT广播到DIE15的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_DIE15_ADDR1_REG       (SOC_SYSCTRL_CFG_BASE + 0x46F4) /* SC_BROADCAST_DIE15_ADDR1表示CPU CORE EVENT广播到DIE15的地址配置 */
#define SOC_SYSCTRL_CFG_SC_BROADCAST_EN_REG                (SOC_SYSCTRL_CFG_BASE + 0x4700) /* SC_BROADCAST_EN表示CPU CORE EVENT_EN的broadcast使能 */
#define SOC_SYSCTRL_CFG_SC_RECEIVE_BROADCAST_EVENT_REG     (SOC_SYSCTRL_CFG_BASE + 0x4710) /* SC_RECEIVE_BROADCAST表示SYSCTRL接收来自其他CPU CORE的 EVENT广播 */
#define SOC_SYSCTRL_CFG_SC_POE_EVENT_EN_REG                (SOC_SYSCTRL_CFG_BASE + 0x4720) /* POE的Event选择使能 */
#define SOC_SYSCTRL_CFG_SC_PLL_LOCK_STATUS_REG             (SOC_SYSCTRL_CFG_BASE + 0x5000) /* PLL锁定状态寄存器。 */
#define SOC_SYSCTRL_CFG_SC_PLLCTRL_ST_REG                  (SOC_SYSCTRL_CFG_BASE + 0x5004) /* SC_PLLCTRL_ST为PLL状态寄存器。 */
#define SOC_SYSCTRL_CFG_SC_SYSMODE_STATUS_REG              (SOC_SYSCTRL_CFG_BASE + 0x50B4) /* SC_CTRL为系统时钟工作状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_DDRC_WARM_RST_ACKED_REG         (SOC_SYSCTRL_CFG_BASE + 0x5200) /* SC_DDRC_WARM_RST_ACKED表示CRG检测到非上电的系统复位的warn_rst_req请求的DDRC握手信号 */
#define SOC_SYSCTRL_CFG_SC_MBIGEN_CLK_ST_REG               (SOC_SYSCTRL_CFG_BASE + 0x5300) /* SC_MBIGEN_CLK_ST为MBIGEN的时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_FTE_CLK_ST_REG                  (SOC_SYSCTRL_CFG_BASE + 0x5308) /* FTE时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_GPIO_CLK_ST_REG                 (SOC_SYSCTRL_CFG_BASE + 0x5320) /* GPIO时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_DDR_CLK_ST_REG                  (SOC_SYSCTRL_CFG_BASE + 0x5338) /* SC_DDR_CLK_ST为DDR的时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_DDR_EXMBIST_CLK_ST_REG          (SOC_SYSCTRL_CFG_BASE + 0x5340) /* SC_DDR_EXMBIST_CLK_ST为DDR_EXMBIST的时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_HHA_CLK_ST_REG                  (SOC_SYSCTRL_CFG_BASE + 0x5350) /* SC_HHA_CLK_ST表示HHA逻辑时钟状态 */
#define SOC_SYSCTRL_CFG_SC_SMMU_ICG_ST_REG                 (SOC_SYSCTRL_CFG_BASE + 0x5380) /* SMMU时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_SDMAM_ICG_ST_REG                (SOC_SYSCTRL_CFG_BASE + 0x5388) /* SDMAM时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_PROBE_CLK_ST_REG                (SOC_SYSCTRL_CFG_BASE + 0x5480) /* PROBE时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_WATCHDOG_CLK_ST_REG             (SOC_SYSCTRL_CFG_BASE + 0x5520) /* WATCHWDOG的时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_WATCHDOG_SEC_CLK_ST_REG         (SOC_SYSCTRL_CFG_BASE + 0x5528) /* WATCHWDOG_SEC的时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_SFC_BUS_CLK_ST_REG              (SOC_SYSCTRL_CFG_BASE + 0x5550) /* SC_SFC_BUS_CLK_ST为SFC_BUS的时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_CLK_ST0_REG               (SOC_SYSCTRL_CFG_BASE + 0x5580) /* SC_TIMER_CLK_ST0为TIMER的时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_CLK_ST1_REG               (SOC_SYSCTRL_CFG_BASE + 0x5588) /* SC_TIMER_CLK_ST1为TIMER的时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_SEC_TIMER_CLK_ST_REG            (SOC_SYSCTRL_CFG_BASE + 0x5590) /* SC_SEC_TIMER_CLK_ST为安全TIMER64的时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_REF_CLK_ST_REG                  (SOC_SYSCTRL_CFG_BASE + 0x5600) /* SC_REF_CLK_ST表示CDIE_CRG内ref_clk的时钟状态。 */
#define SOC_SYSCTRL_CFG_SC_GPIO_DB_CLK_ST_REG              (SOC_SYSCTRL_CFG_BASE + 0x5608) /* SC_GPIO_DB_CLK_ST表示CDIE_CRG内gpio_db_clk的时钟状态。 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_CLK_ST_REG                (SOC_SYSCTRL_CFG_BASE + 0x5618) /* SC_DJTAG_CLK_ST表示DJTAG相关逻辑时钟状态 */
#define SOC_SYSCTRL_CFG_SC_FUNC_MBIST_CLK_ST_REG           (SOC_SYSCTRL_CFG_BASE + 0x5620) /* FUNC_MBIST时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_HPM_CLK_ST_REG                  (SOC_SYSCTRL_CFG_BASE + 0x5628) /* SC_HPM_CLK_ST表示CDIE_CRG内hpm_clk的时钟状态。 */
#define SOC_SYSCTRL_CFG_SC_SYSCNT_CLK_ST_REG               (SOC_SYSCTRL_CFG_BASE + 0x5630) /* SC_SYSCNT_CLK_ST表示CDIE_CRG内syscnt_clk的时钟状态。 */
#define SOC_SYSCTRL_CFG_SC_ULTRASOC_CLK_ST_REG             (SOC_SYSCTRL_CFG_BASE + 0x5640) /* SC_ULTRASOC_CLK_ST表示ULTRASOC的时钟状态。 */
#define SOC_SYSCTRL_CFG_SC_DCBIST_CLK_ST_REG               (SOC_SYSCTRL_CFG_BASE + 0x5650) /* SC_DCBIST_CLK_ST表示DCIP的时钟状态。 */
#define SOC_SYSCTRL_CFG_SC_HHA_MBIST_CLK_ST_REG            (SOC_SYSCTRL_CFG_BASE + 0x5680) /* SC_HHA_MBIST_CLK_ST表示DCIP的时钟状态。 */
#define SOC_SYSCTRL_CFG_SC_MESH_CLK_ST_REG                 (SOC_SYSCTRL_CFG_BASE + 0x5700) /* MESH的时钟状态寄存器。 */
#define SOC_SYSCTRL_CFG_SC_FMETA_TEST_CLK_ST_REG           (SOC_SYSCTRL_CFG_BASE + 0x5750) /* FMETA TEST时钟状态寄存器。 */
#define SOC_SYSCTRL_CFG_SC_L3D_CLK_ST_REG                  (SOC_SYSCTRL_CFG_BASE + 0x57A0) /* L3D的时钟状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_L3_MBIST_CLK_ST_REG             (SOC_SYSCTRL_CFG_BASE + 0x57A8) /* L3D MBIST的时钟状态。 */
#define SOC_SYSCTRL_CFG_SC_MBIGEN_RESET_ST_REG             (SOC_SYSCTRL_CFG_BASE + 0x5A00) /* MBIGEN软复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_SDMAM_RESET_ST_REG              (SOC_SYSCTRL_CFG_BASE + 0x5A08) /* SDMAM软复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_FTE_RESET_ST_REG                (SOC_SYSCTRL_CFG_BASE + 0x5A10) /* FTE复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_GPIO_RESET_ST_REG               (SOC_SYSCTRL_CFG_BASE + 0x5A20) /* GPIO软复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_DDRC_RESET_ST_REG               (SOC_SYSCTRL_CFG_BASE + 0x5A28) /* SC_DDRC_RESET_ST为CDIE内DDRC软复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_DDRC_EXMBIST_RESET_ST_REG       (SOC_SYSCTRL_CFG_BASE + 0x5A30) /* SC_DDRC_EXMBIST_RESET_ST为CDIE内DDRC_EXMBIST软复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_HHA_RESET_ST_REG                (SOC_SYSCTRL_CFG_BASE + 0x5A40) /* SC_HHA_SRST_ST表示HHA逻辑复位状态 */
#define SOC_SYSCTRL_CFG_SC_SFC_RESET_ST_REG                (SOC_SYSCTRL_CFG_BASE + 0x5A80) /* SFC软复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_RESET_ST0_REG             (SOC_SYSCTRL_CFG_BASE + 0x5A88) /* TIMER软复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_RESET_ST1_REG             (SOC_SYSCTRL_CFG_BASE + 0x5A90) /* TIMER软复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_TIMER_SEC_RESET_ST_REG          (SOC_SYSCTRL_CFG_BASE + 0x5A98) /* TIMER_SEC软复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_WDOG_RESET_ST_REG               (SOC_SYSCTRL_CFG_BASE + 0x5AA0) /* WDOG软复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_WDOG_SEC_RESET_ST_REG           (SOC_SYSCTRL_CFG_BASE + 0x5AA8) /* WDOG_SEC软复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_REQ_PHY_REGS_RESET_ST_REG       (SOC_SYSCTRL_CFG_BASE + 0x5B48) /* DDR PHY的当前软复位状态 */
#define SOC_SYSCTRL_CFG_SC_ULTRASOC_REGS_RESET_ST_REG      (SOC_SYSCTRL_CFG_BASE + 0x5B50) /* ULTRASOC的当前软复位状态 */
#define SOC_SYSCTRL_CFG_SC_STATUS_TRESET_ST_REG            (SOC_SYSCTRL_CFG_BASE + 0x5C50) /* STATUS的RST_REQ信号的状态。 */
#define SOC_SYSCTRL_CFG_SC_DCIP_TRESET_ST_REG              (SOC_SYSCTRL_CFG_BASE + 0x5C60) /* DCIP的RST_REQ信号的状态。 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_RESET_ST_REG              (SOC_SYSCTRL_CFG_BASE + 0x5D18) /* SC_DJTAG_SRST_ST表示DJTAG相关逻辑复位状态 */
#define SOC_SYSCTRL_CFG_SC_FUNC_MBIST_RESET_ST_REG         (SOC_SYSCTRL_CFG_BASE + 0x5D20) /* SC_FUNC_MBIST_RESET_ST表示对当前FUNC_MBIST的RST_REQ信号的状态。 */
#define SOC_SYSCTRL_CFG_SC_HPM_RESET_ST_REG                (SOC_SYSCTRL_CFG_BASE + 0x5D28) /* SC_HPM_SRST_ST表示HPM相关逻辑复位状态 */
#define SOC_SYSCTRL_CFG_SC_SYSCNT_RESET_ST_REG             (SOC_SYSCTRL_CFG_BASE + 0x5D30) /* SC_SYSCNT_SRST_ST表示DJTAG相关逻辑复位状态 */
#define SOC_SYSCTRL_CFG_SC_HHA_MBSIT_RESET_ST_REG          (SOC_SYSCTRL_CFG_BASE + 0x5D80) /* SC_HHA_MBSIT_RESET_ST表示相关逻辑复位状态 */
#define SOC_SYSCTRL_CFG_SC_FMETA_TEST_RESET_ST_REG         (SOC_SYSCTRL_CFG_BASE + 0x5DA0) /* FMETA逻辑复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_L3D_RESET_ST_REG                (SOC_SYSCTRL_CFG_BASE + 0x5E00) /* L3D软复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_MBIST_L3D_RESET_ST_REG          (SOC_SYSCTRL_CFG_BASE + 0x5E08) /* MBIST_L3D软复位状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_GIC_NOCMT_ST_REG                (SOC_SYSCTRL_CFG_BASE + 0x6000) /* 泰山无指令状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_NOCMT_IRQ_STATUS_REG            (SOC_SYSCTRL_CFG_BASE + 0x6004) /* 泰山无指令超时中断状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_TSENSOR_ST_REG                  (SOC_SYSCTRL_CFG_BASE + 0x60D0) /* tsensor系统状态寄存器。 */
#define SOC_SYSCTRL_CFG_SC_TSENSOR_TEMP_SAMPLE_VALID_REG   (SOC_SYSCTRL_CFG_BASE + 0x60D4) /* 芯片温度采样值 */
#define SOC_SYSCTRL_CFG_SC_TSENSOR_TEMP_SAMPLE_AVERAGE_REG (SOC_SYSCTRL_CFG_BASE + 0x60D8) /* 芯片温度采样均值 */
#define SOC_SYSCTRL_CFG_SC_DCIP_ST1_REG                    (SOC_SYSCTRL_CFG_BASE + 0x60E0) /* DCIP状态寄存器1 */
#define SOC_SYSCTRL_CFG_SC_DCIP_BIST_ST_REG                (SOC_SYSCTRL_CFG_BASE + 0x60E4) /* DCIP BIST状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_ULTRASOC_MEM_ECC_REG            (SOC_SYSCTRL_CFG_BASE + 0x6100) /* UltraSoC Memory ECC状态 */
#define SOC_SYSCTRL_CFG_SC_JITTER_MONITOR_STATE0_REG       (SOC_SYSCTRL_CFG_BASE + 0x6200) /* JITTER MONITOR状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_JITTER_MONITOR_STATE1_REG       (SOC_SYSCTRL_CFG_BASE + 0x6204) /* JITTER MONITOR状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_JITTER_MONITOR_STATE2_REG       (SOC_SYSCTRL_CFG_BASE + 0x6208) /* JITTER MONITOR状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_JITTER_MONITOR_STATE3_REG       (SOC_SYSCTRL_CFG_BASE + 0x620C) /* JITTER MONITOR状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_EXT_INT_POLARITY_ST_REG         (SOC_SYSCTRL_CFG_BASE + 0x6250) /* 外部中断状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_EXT_INT_MASK_ST_REG             (SOC_SYSCTRL_CFG_BASE + 0x6254) /* 外部中断状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_MBIST_CPUI_DATAOUT_REG          (SOC_SYSCTRL_CFG_BASE + 0x7500) /* DFT MBIST模式下读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_PLL_INT_STATUS_REG              (SOC_SYSCTRL_CFG_BASE + 0x8000) /* PLL中断状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_INT_STATUS_REG            (SOC_SYSCTRL_CFG_BASE + 0x8008) /* DJTAG中断状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_TSENSOR_INT_STATUS_REG          (SOC_SYSCTRL_CFG_BASE + 0x8010) /* TSENSOR中断状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_XTAL_ST_REG                     (SOC_SYSCTRL_CFG_BASE + 0x8104) 
#define SOC_SYSCTRL_CFG_SC_CNT_ST_REG                      (SOC_SYSCTRL_CFG_BASE + 0x8108) 
#define SOC_SYSCTRL_CFG_SC_ITIR0_TEST_REG                  (SOC_SYSCTRL_CFG_BASE + 0x810C) 
#define SOC_SYSCTRL_CFG_SC_ITOR_TEST_REG                   (SOC_SYSCTRL_CFG_BASE + 0x8110) 
#define SOC_SYSCTRL_CFG_SC_CNT_DATA_REG                    (SOC_SYSCTRL_CFG_BASE + 0x8114) /* PLL切换COUNTER的值状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_AXI_ACC_ST_REG                  (SOC_SYSCTRL_CFG_BASE + 0x8504) 
#define SOC_SYSCTRL_CFG_SC_DJTAG_SEC_ACC_EN_REG            (SOC_SYSCTRL_CFG_BASE + 0xD800) /* DJTAG访问各模块内安全世界寄存器的安全访问控制使能。（注意：1，此寄存器空间必须是安全访问才能成功。） */
#define SOC_SYSCTRL_CFG_SC_DJTAG_MSTR_ADDR_REG             (SOC_SYSCTRL_CFG_BASE + 0xD810) /* SC_DJTAG_MSTR_ADDR为DJTAG Master配置访问模块的偏移地址寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_MSTR_DATA_REG             (SOC_SYSCTRL_CFG_BASE + 0xD814) /* SC_DJTAG_MSTR_DATA为DJTAG Master的写数据 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_MSTR_CFG_REG              (SOC_SYSCTRL_CFG_BASE + 0xD818) /* SC_DJTAG_MSTR_CFG为DJTAG Master的配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_MSTR_START_EN_REG         (SOC_SYSCTRL_CFG_BASE + 0xD81C) /* SC_DJTAG_MSTR_START_EN为DJTAG Master访问chain链的start使能 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_MSTR_PIPE_CFG_REG         (SOC_SYSCTRL_CFG_BASE + 0xD820) /* DJTAG_MSTR PIPELINE配置寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_TMOUT_REG                 (SOC_SYSCTRL_CFG_BASE + 0xD840) /* SC_DJTAG_TMOUT为IDIE中DJTAG Master的状态机超时阈值 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_SEC_MODE_REG              (SOC_SYSCTRL_CFG_BASE + 0xD844) /* DJTAG安全访问模式寄存器。 */
#define SOC_SYSCTRL_CFG_SC_AXI_MSTR_SEC_ACC_EN_REG         (SOC_SYSCTRL_CFG_BASE + 0xDA00) /* sysctrl内AXI Master访问DDR安全地址空间的安全访问控制使能。（注意：1，此寄存器空间必须是安全访问才能成功。） */
#define SOC_SYSCTRL_CFG_SC_AXI_MSTR_USER_REG               (SOC_SYSCTRL_CFG_BASE + 0xDA04) /* SC_AXI_MSTR_USER表示SYS_CTRL内AXI Master的虚拟机ID */
#define SOC_SYSCTRL_CFG_SC_AXI_MSTR_DATA0_REG              (SOC_SYSCTRL_CFG_BASE + 0xDA08) /* SC_AXI_MSTR_DATA0为SYS_CTRL内AXI Master的访问数据bit[31:0] */
#define SOC_SYSCTRL_CFG_SC_AXI_MSTR_DATA1_REG              (SOC_SYSCTRL_CFG_BASE + 0xDA0C) /* SC_AXI_MSTR_DATA1为SYS_CTRL内AXI Master的访问数据bit[63:32] */
#define SOC_SYSCTRL_CFG_SC_AXI_MSTR_DATA2_REG              (SOC_SYSCTRL_CFG_BASE + 0xDA10) /* SC_AXI_MSTR_DATA2为SYS_CTRL内AXI Master的访问数据bit[95:64] */
#define SOC_SYSCTRL_CFG_SC_AXI_MSTR_DATA3_REG              (SOC_SYSCTRL_CFG_BASE + 0xDA14) /* SC_AXI_MSTR_DATA3为SYS_CTRL内AXI Master的访问数据bit[127:96] */
#define SOC_SYSCTRL_CFG_SC_AXI_MSTR_WR_USER_REG            (SOC_SYSCTRL_CFG_BASE + 0xDA18) /* SC_AXI_MSTR_WR_USER为SYS_CTRL内AXI Master读写使能 */
#define SOC_SYSCTRL_CFG_SC_AXI_MSTR_ADDR0_REG              (SOC_SYSCTRL_CFG_BASE + 0xDA1C) /* SC_AXI_MSTR_ADDR0为SYS_CTRL内AXI Master的访问地址bit[31:0] */
#define SOC_SYSCTRL_CFG_SC_AXI_MSTR_ADDR1_REG              (SOC_SYSCTRL_CFG_BASE + 0xDA20) /* SC_AXI_MSTR_ADDR1为SYS_CTRL内AXI Master的访问地址bit[63:32] */
#define SOC_SYSCTRL_CFG_SC_AXI_MSTR_START_EN_REG           (SOC_SYSCTRL_CFG_BASE + 0xDA24) /* SC_AXI_MSTR_START_EN表示SYS_CTRL内AXI Master的start使能 */
#define SOC_SYSCTRL_CFG_SC_EFUSE_SECURE_INFO_REG           (SOC_SYSCTRL_CFG_BASE + 0xE050) /* EFUSE中的安全访问查询 */
#define SOC_SYSCTRL_CFG_SC_BOOT_INFO_REG                   (SOC_SYSCTRL_CFG_BASE + 0xE088) /* SC_BOOT_CTRL_CFG_ST表示CPU启动控制信号经过配置后最终状态 */
#define SOC_SYSCTRL_CFG_SC_PAD_INFO_REG                    (SOC_SYSCTRL_CFG_BASE + 0xE08C) /* 板级过来的PAD信息 */
#define SOC_SYSCTRL_CFG_SC_LAST_RST_STATUS_REG             (SOC_SYSCTRL_CFG_BASE + 0xE090) /* SC_LAST_RST_STATUS表示芯片最后一次复位的复位状态 */
#define SOC_SYSCTRL_CFG_SC_BOARD_CFG_INFO_REG              (SOC_SYSCTRL_CFG_BASE + 0xE094) /* 单板配置信息状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_EFUSE_HARD_REPAIR_DONE_REG      (SOC_SYSCTRL_CFG_BASE + 0xE098) /* EFUSE的hard_repair_done查询 */
#define SOC_SYSCTRL_CFG_SC_JTAG_AUTH_RESULT_REG            (SOC_SYSCTRL_CFG_BASE + 0xE100) /* 鉴权结果寄存器 */
#define SOC_SYSCTRL_CFG_SYSCTRL_CFG_VERSION0_REG           (SOC_SYSCTRL_CFG_BASE + 0xE0A0) /* VERSION寄存器0 */
#define SOC_SYSCTRL_CFG_SYSCTRL_CFG_MAGIC_WORD_REG         (SOC_SYSCTRL_CFG_BASE + 0xE0A4) /* SYSCTRL_CFG 版本号锁定寄存器 */
#define SOC_SYSCTRL_CFG_SYSCTRL_CFG_ECO_CFG0_REG           (SOC_SYSCTRL_CFG_BASE + 0xE0A8) /* 用于ECO的冗余配置寄存器0 */
#define SOC_SYSCTRL_CFG_SYSCTRL_CFG_ECO_CFG1_REG           (SOC_SYSCTRL_CFG_BASE + 0xE0AC) /* 用于ECO的冗余配置寄存器1 */
#define SOC_SYSCTRL_CFG_SYSCTRL_CFG_ECO_CFG2_REG           (SOC_SYSCTRL_CFG_BASE + 0xE0B0) /* 用于ECO的冗余配置寄存器2 */
#define SOC_SYSCTRL_CFG_SYSCTRL_CFG_ECO_CFG3_REG           (SOC_SYSCTRL_CFG_BASE + 0xE0B4) /* 用于ECO的冗余配置寄存器3 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_RD_DATA0_REG              (SOC_SYSCTRL_CFG_BASE + 0xE800) /* DJTAG扫描链上第一个模块读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_RD_DATA1_REG              (SOC_SYSCTRL_CFG_BASE + 0xE804) /* DJTAG扫描链上第二个模块读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_RD_DATA2_REG              (SOC_SYSCTRL_CFG_BASE + 0xE808) /* DJTAG扫描链上第三个模块读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_RD_DATA3_REG              (SOC_SYSCTRL_CFG_BASE + 0xE80C) /* DJTAG扫描链上第四个模块读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_RD_DATA4_REG              (SOC_SYSCTRL_CFG_BASE + 0xE810) /* DJTAG扫描链上第五个模块读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_RD_DATA5_REG              (SOC_SYSCTRL_CFG_BASE + 0xE814) /* DJTAG扫描链上第六个模块读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_RD_DATA6_REG              (SOC_SYSCTRL_CFG_BASE + 0xE818) /* DJTAG扫描链上第七个模块读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_RD_DATA7_REG              (SOC_SYSCTRL_CFG_BASE + 0xE81C) /* DJTAG扫描链上第八个模块读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_RD_DATA8_REG              (SOC_SYSCTRL_CFG_BASE + 0xE820) /* DJTAG扫描链上第九个模块读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_RD_DATA9_REG              (SOC_SYSCTRL_CFG_BASE + 0xE824) /* DJTAG扫描链上第十个模块读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_DJTAG_OP_ST_REG                 (SOC_SYSCTRL_CFG_BASE + 0xE828) /* DJTAG访问状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_AXI_RD_DATA0_REG                (SOC_SYSCTRL_CFG_BASE + 0xEA00) /* AXI访问DDR的读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_AXI_RD_DATA1_REG                (SOC_SYSCTRL_CFG_BASE + 0xEA04) /* AXI访问DDR的读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_AXI_RD_DATA2_REG                (SOC_SYSCTRL_CFG_BASE + 0xEA08) /* AXI访问DDR的读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_AXI_RD_DATA3_REG                (SOC_SYSCTRL_CFG_BASE + 0xEA0C) /* AXI访问DDR的读数据寄存器 */
#define SOC_SYSCTRL_CFG_SC_AXI_MSTR_ST_REG                 (SOC_SYSCTRL_CFG_BASE + 0xEA10) /* AXI访问DDR返回状态寄存器 */
#define SOC_SYSCTRL_CFG_SC_NORESET_0_REG                   (SOC_SYSCTRL_CFG_BASE + 0xF000) /* 安全启动记录寄存器0（寄存器无复位端）。 */
#define SOC_SYSCTRL_CFG_SC_NORESET_1_REG                   (SOC_SYSCTRL_CFG_BASE + 0xF004) /* 安全启动记录寄存器1（寄存器无复位端）。 */
#define SOC_SYSCTRL_CFG_SC_NORESET_2_REG                   (SOC_SYSCTRL_CFG_BASE + 0xF008) /* 安全启动记录寄存器2（寄存器无复位端）。 */
#define SOC_SYSCTRL_CFG_SC_NORESET_3_REG                   (SOC_SYSCTRL_CFG_BASE + 0xF00C) /* 安全启动记录寄存器3（寄存器无复位端）。 */
#define SOC_SYSCTRL_CFG_SC_NORESET_4_REG                   (SOC_SYSCTRL_CFG_BASE + 0xF010) /* 安全启动记录寄存器4（寄存器无复位端）。 */
#define SOC_SYSCTRL_CFG_SC_NORESET_5_REG                   (SOC_SYSCTRL_CFG_BASE + 0xF014) /* 安全启动记录寄存器5（寄存器无复位端）。 */
#define SOC_SYSCTRL_CFG_SC_NORESET_6_REG                   (SOC_SYSCTRL_CFG_BASE + 0xF018) /* 安全启动记录寄存器6（寄存器无复位端）。 */
#define SOC_SYSCTRL_CFG_SC_NORESET_7_REG                   (SOC_SYSCTRL_CFG_BASE + 0xF01C) /* 无复位端寄存器7 */
#define SOC_SYSCTRL_CFG_SC_NORESET_8_REG                   (SOC_SYSCTRL_CFG_BASE + 0xF020) /* 无复位端寄存器8 */
#define SOC_SYSCTRL_CFG_SC_NORESET_9_REG                   (SOC_SYSCTRL_CFG_BASE + 0xF024) /* 无复位端寄存器9 */
#define SOC_SYSCTRL_CFG_SC_NORESET_10_REG                  (SOC_SYSCTRL_CFG_BASE + 0xF028) /* 无复位端寄存器10 */
#define SOC_SYSCTRL_CFG_SC_NORESET_11_REG                  (SOC_SYSCTRL_CFG_BASE + 0xF02C) /* 无复位端寄存器11 */
#define SOC_SYSCTRL_CFG_SC_NORESET_12_REG                  (SOC_SYSCTRL_CFG_BASE + 0xF030) /* 无复位端寄存器12 */
#define SOC_SYSCTRL_CFG_SC_NORESET_13_REG                  (SOC_SYSCTRL_CFG_BASE + 0xF034) /* 无复位端寄存器13 */
#define SOC_SYSCTRL_CFG_SC_NORESET_14_REG                  (SOC_SYSCTRL_CFG_BASE + 0xF038) /* 无复位端寄存器14 */
#define SOC_SYSCTRL_CFG_SC_NORESET_15_REG                  (SOC_SYSCTRL_CFG_BASE + 0xF03C) /* 无复位端寄存器15 */
#define SOC_SYSCTRL_CFG_SC_SYSCTRL_LOCK_REG                (SOC_SYSCTRL_CFG_BASE + 0xF100) /* 系统控制器锁定寄存器。（注意：1，此寄存器空间必须是安全访问才能成功） */
#define SOC_SYSCTRL_CFG_SC_SYSCTRL_UNLOCK_REG              (SOC_SYSCTRL_CFG_BASE + 0xF110) /* 系统控制器解锁寄存器。（注意：1，此寄存器空间必须是安全访问才能成功） */
#define SOC_SYSCTRL_CFG_SC_PROBE_MUX_SEL_REG               (SOC_SYSCTRL_CFG_BASE + 0xF200) /* PROBE分组选择 */
#define SOC_SYSCTRL_CFG_SC_ECO_RSV0_REG                    (SOC_SYSCTRL_CFG_BASE + 0xFF00) /* ECO 寄存器0 */
#define SOC_SYSCTRL_CFG_SC_ECO_RSV1_REG                    (SOC_SYSCTRL_CFG_BASE + 0xFF04) /* ECO 寄存器1 */
#define SOC_SYSCTRL_CFG_SC_ECO_RSV2_REG                    (SOC_SYSCTRL_CFG_BASE + 0xFF08) /* ECO 寄存器2 */
#define SOC_SYSCTRL_CFG_SC_ECO_RSV3_REG                    (SOC_SYSCTRL_CFG_BASE + 0xFF0C) /* ECO 寄存器3 */
#define SOC_SYSCTRL_CFG_SC_ECO_RSV4_REG                    (SOC_SYSCTRL_CFG_BASE + 0xFF10) /* ECO 寄存器4 */
#define SOC_SYSCTRL_CFG_SC_ECO_RSV5_REG                    (SOC_SYSCTRL_CFG_BASE + 0xFF14) /* ECO 寄存器5 */
#define SOC_SYSCTRL_CFG_SC_MONITOR_TEST0_REG               (SOC_SYSCTRL_CFG_BASE + 0xFFF0) /* 测试寄存器 */
#define SOC_SYSCTRL_CFG_SC_MONITOR_TEST1_REG               (SOC_SYSCTRL_CFG_BASE + 0xFFF4) /* 测试寄存器 */
#define SOC_SYSCTRL_CFG_SC_CHIP_INFO_REG                   (SOC_SYSCTRL_CFG_BASE + 0xFFF8) /* 芯片信息寄存器 */
#define SOC_SYSCTRL_CFG_SC_VER_VER_REG                     (SOC_SYSCTRL_CFG_BASE + 0xFFFC) /* 版本寄存器 */

#endif // __SYSCTRL_CFG_REG_OFFSET_H__
